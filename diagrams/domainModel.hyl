classDiagram {
    enum = {
        (name, fields) = args
        noedit {
            class(name, keywords = list("enum")) {
                sections += fields.map { "+" + it }
            } styles {
                class += "v-top"
            }
        }
    }

    enum("UserRole", list("ADMIN", "CUSTOMER", "EMPLOYEE")) layout {
        pos = apos(470, -560)
    }

    enum("PaymentStatus", list("COMPLETED", "RESERVED")) layout {
        pos = apos(830, -560)
    }

    enum(
        "DeliveryStatus",
        list(
            "PENDING",
            "IN_PROGRESS",
            "DELIVERED",
            "RETURNED",
            "RETURN_IN_PROGRESS"
        )
    ) layout {
        pos = apos(110, -560)
    }

    class("AuthCredential") layout {
        width = 144.728151114
        pos = apos(-240, 460)
    }

    class("Account") {
        public {
            role : UserRole
            username : string
        }
    } layout {
        pos = apos(-240, 620)
    }

    class("User") {

    } layout {
        height = 117.594513591
        pos = apos(-240, 830)
    }

    class("Address") {
        public {
            street1 : string
            street2 : string
            city : string
            postalCode : string
            country : string
            companyName : string
        }
    } layout {
        pos = apos(-240, 1140)
    }

    class("PaymentMethod") {
        public {
            name : string
            description : string
        }
    } layout {
        pos = apos(1390, 1670)
    }

    class("PaymentInformation") layout {
        pos = apos(820, 1670)
    }

    class("Payment") {
        public {
            status : PaymentStatus
            payedAt : "Date?"
            amount : int
        }
    } layout {
        pos = apos(280, 1670)
    }

    class("ShipmentMethod") {
        public {
            name : string
            description : string
            claculateFees(TODO) : int
        }
    } layout {
        pos = apos(1390, 1460)
    }

    class("Shipment") {
        public {
            status : DeliveryStatus
        }
    } layout {
        pos = apos(810, 1460)
    }

    class("Product") {
        public {
            internalName : string
            averageReview : double
            isPubliclyVisible : boolean
        }
    } layout {
        pos = apos(810, -130)
    }

    class("ProductVariant") {
        public {
            isPubliclyVisible : boolean
        }
    } layout {
        pos = apos(810, 50)
    }

    class("ProductVariantVersion") {
        public {
            name : string
            description : string
            version : int
            retailPrice : int
            undiscountedPrice : int
            discount : double
            createdAt : Date
            calculateCurrentPrice() : int
        }
    } layout {
        pos = apos(810, 280)
    }

    comment(
        "The retailPrice is given just as information. The currentPrice is the price used and calculated by undiscountedPrice * (1 - discount)"
    ) layout {
        pos = apos(510, 340)
    }

    class("Media") layout {
        width = 196.500137712
        pos = apos(810, 500)
    }

    class("ShoppingCart") {
        public {
            lastUpdatedAt : Date
        }
    } layout {
        pos = apos(280, 50)
    }

    class("ShoppingCartItem") {
        public {
            count : int
            addedAt : Date
        }
    } layout {
        pos = apos(280, 200)
    }

    class("Wishlist") {
        public {
            name : string
            description : string
            lastUpdatedAt : Date
        }
    } layout {
        pos = apos(280, -130)
    }

    class("Order") {
        public {
            date : Date
        }
    } layout {
        pos = apos(280, 970)
    }

    class("OrderItem") {
        public {
            compensatableAmount : int
        }
    } layout {
        pos = apos(810, 970)
    }

    class("Review") {
        public {
            body : string
            rating : int
            date : Date
        }
    } layout {
        pos = apos(810, -320)
    }

    class("Notification") {
        public {
            title : string
            body : string
            isRead : boolean
            date : Date
        }
    } layout {
        pos = apos(-730, 824)
    }

    class("ProductItem") {
        public {
            isInInventory : boolean
        }
    } layout {
        pos = apos(1480, 370)
    }

    class("Return") {
        public {
            refundedAmount : int
        }
    } layout {
        pos = apos(520, 1150)
    }

    class("Invoice") {
        public {
            totalInvoiceAmount : int
        }
    } styles {

    } layout {
        pos = apos(280, 1350)
    }

    class("Receipt") {

    } layout {
        pos = apos(-230, 1670)
    }

    class("CouponCode") {
        public {
            usages : "int"
            maxUsages : "int?"
            validUntil : Date
            validFrom : Date
            code : string
        }
    } layout {
        pos = apos(280, 530)
    }

    class("CouponTemplate") {
        public {
            discount : double
            maxUsagesPerUser : "int?"
            validUntil : Date
            validFrom : Date
            minOrderAmount : "int?"
            maxDiscountableAmount : "int?"
        }
    } layout {
        pos = apos(750, 750)
    }

    class("Coupon") {
        public {
            usages : int
        }
    } layout {
        pos = apos(280, 750)
    }

    class("TaxRate") layout {
        pos = apos(1370, 600)
    }

    class("TaxRateVersion") {
        public {
            rate : double
        }
    } layout {
        pos = apos(1370, 830)
    }

    class("Category") {
        public {
            name : string
            description : string
        }
    } layout {
        pos = apos(1470, -510)
    }

    class("CategoryTag", abstract = true) {
        public {
            name : string
            description : string
        }
    } layout {
        pos = apos(1470, -330)
    }

    class("NumericalCategoryTag") {
        public {
            unit : string
        }
    } layout {
        pos = apos(1690, -140)
    }

    class("CategorialCategoryTag") layout {
        pos = apos(1270, -140)
    }

    class("CategorialCategoryTagValue") {
        public {
            name : string
            description : string
        }
    } layout {
        pos = apos(1270, 60)
    }

    class("NumericalCategoryTagValue") {
        public {
            value : double
        }
    } layout {
        pos = apos(1690, 60)
    }

    class("CategoryTagValue", abstract = true) layout {
        pos = apos(1470, 210)
    }

    showRelations = true

    if(showRelations) {
        User --> Account with {
            label("1 : account", 0.905, 62.5)
            label("1 : user", 0.195, 32.1)
            over = start(0.75).line(end(0.25))
        }

        Account --> AuthCredential with {
            label("1..* : credentials", 0.945, 73.4)
            label("1 : user", 0.25, 34.6)
            over = start(0.75).line(end(0.25))
        }

        Payment --> PaymentInformation with {
            label("1 : paymentInformation", 0.65, 12.1)
            label("0..* : payments", 0.24, -26.1)
            over = start(1).line(end(0.5))
        }

        Shipment --> ShipmentMethod with {
            label("1 : method", 0.795, 14.4)
            label("0..* : shipments", 0.225, -24.2)
            over = start(0).line(end(0.5))
        }

        PaymentInformation --> PaymentMethod with {
            label("1 : method", 0.775, 11.4)
            label("0..* : payments", 0.215, -23)
            over = start(1).line(end(0.5))
        }

        User --> Address with {
            label("0..* : addresses", 0.77, 67.7)
            label("0..1 : user", 0.03, 48.2)
            over = start(0.25).line(end(0.75))
        }

        Shipment --> Address with {
            label("1 : address", 0.66, 57.8)
            label("0..* : shipments", 0.025, -8.4)
            over = start(0.485).axisAligned(1, end(0.3))
        }

        User --> PaymentInformation with {
            label("0..* : paymentInformations", 0.975, 114.3)
            label("1 : user", 0.065, 24.9)
            over = start(0.415).axisAligned(
                1,
                apos(-470, 1760),
                -1,
                end(0.3125)
            )
        }

        Product --> ProductVariant with {
            label("1..* : variants", 0.6875, -62)
            label("1 : product", 0.06, -43.1)
            over = start(0.1875).line(end(0.8125))
        }

        Product !--> ProductVariant with {
            label("1 : defaultVariant", 0.75, 71.3)
            over = start(0.25).line(end(0.75))
        }

        ProductVariant --> ProductVariantVersion with {
            label("1..* : versions", 0.65, -59.9)
            label("1 : variant", 0.065, -41.9)
            over = start(0.1875).line(end(0.8125))
        }

        ProductVariant --> ProductVariantVersion with {
            label("1 : currentVersion", 0.665, 77.3)
            over = start(0.25).line(end(0.75))
        }

        ProductVariantVersion !--> Media with {
            label("1..* : medias", 0.695, 70)
            over = start(0.31).line(end(0.66))
        }

        ShoppingCart --> ShoppingCartItem with {
            label("0..* : items", 0.71, -54.2)
            label("1 : shoppingCart", 0.035, -64)
            over = start(0.25).line(end(0.75))
        }

        User --> ShoppingCart with {
            label("1 : cart", 0.695, -32)
            label("1 : user", 0.085, 4.9)
            over = start(0.0625).axisAligned(0.83, end(0.5))
        }

        ShoppingCartItem --> ProductVariant with {
            label("1 : variant", 0.93, 15.2)
            label("0..* : inCarts", 0.145, 4.2)
            over = start(0).axisAligned(0.48, end(0.375))
        }

        User --> Wishlist with {
            label("0..* : wishlists", 0.725, -35.3)
            label("1 : user", 0.105, 3.4)
            over = start(1).axisAligned(0.644, end(0.5))
        }

        Wishlist --> ProductVariant with {
            label("0..* : productVariants", 0.885, -49)
            label("0..* : inWishlists", 0.195, -25.7)
            over = start(0.0625).axisAligned(0.47, end(0.625))
        }

        Order --> OrderItem with {
            label("1..* : items", 0.82, 15.8)
            label("1 : order", 0.145, 7.7)
            over = start(0).line(end(0.5))
        }

        Invoice --> Payment with {
            label("0..1 : payment", 0.895, -70.3)
            label("0..1 : invoice", 0.04, -55)
            over = start(0.315).line(end(0.685))
        }

        Order --> Shipment with {
            label("1..* : shipments", 0.95, 74.6)
            label("0..1 : order", 0.02, -48.1)
            over = start(0.235).axisAligned(-0.404, end(0.655))
        }

        User --> Order with {
            label("0..* : orders", 0.95, 13.4)
            label("1 : user", 0.72, -21.6)
            over = start(0.1875).axisAligned(0, end(0.5))
        }

        Product --> Review with {
            label("0..* : reviews", 0.97, 60)
            label("1 : order", 0.295, 33.8)
            over = start(0.75).line(end(0.25))
        }

        User --> Review with {
            label("0..* : reviews", 0.975, 13.4)
            label("1 : user", 0.17, 2)
            over = start(0.9375).axisAligned(0.124, end(0.5))
        }

        OrderItem !--> ProductVariantVersion with {
            label("1 : productVariantVersion", 0.975, -102)
            over = start(0.875).line(end(0.125))
        }

        Shipment --> OrderItem with {
            label("0..* : sentItems", 0.925, 70.3)
            label("1 : sentWith", 0.065, 49.8)
            over = start(0.85).line(end(0.15))
        }

        User --> Notification with {
            label("0..* : notifications", 0.63, -13.5)
            label("1 : user", 0.155, 24.8)
            over = start(0.59).line(end(0.93))
        }

        ProductVariant --> ProductItem with {
            label("0..* : instances", 0.935, 13)
            label("1 : productVariant", 0.115, -27)
            over = start(0.015).axisAligned(0.511, apos(1160, 190), 0, end(Position.Left))
        }

        OrderItem !--> ProductItem with {
            label("1 : instance", 0.66, 59)
            over = start(0.08).axisAligned(1, end(0.13))
        }

        Return --> OrderItem with {
            label("1..* : returnedItems", 0.97, 81.9)
            label("0..1 : returnedWith", 0.5, 41.9)
            over = start(0.835).axisAligned(-0.425, end(0.29))
        }

        Order --> Return with {
            label("0..* : returns", 0.815, -60)
            label("1 : order", 0.09, -37)
            over = start(0.125).line(end(0.675))
        }

        Order --> Invoice with {
            over = start(0.32).line(end(0.68))
            label("1 : invoice", 0.935, -52)
            label("1 : order", 0.02, -39)
        }

        Invoice --> Address with {
            over = start(0.485).axisAligned(1, end(0.19))
            label("1 : invoiceAddress", 0.65, 86)
            label("0..* : invoices", 0.06, -5.9)
        }

        Payment --> Receipt with {
            label("1 : receipt", 0.85, -16)
            label("1 : payment", 0.205, -6)
            over = start(0.5).line(end(0))
        }

        Return --> Shipment with {
            label("1 : shipment", 0.97, -58.8)
            label("0..1 : return", 0.46, 12.1)
            over = start(0.035).axisAligned(-1, end(0.73))
        }

        Return --> Payment with {
            label("0..1 : payment", 0.96, -64)
            label("0..1 : return", 0.01, -51)
            over = start(0.275).axisAligned(-0.425, end(0.835))
        }

        Order --> Coupon with {
            label("0..1 : coupon", 0.97, 66.9)
            label("0..* : orders", 0.215, 57)
            over = start(0.795).line(end(0.205))
        }

        User --> Coupon with {
            label("0..* : coupons", 0.99, 64.3)
            label("1 : user", 0.39, 6.1)
            over = start(0.125).axisAligned(-1, end(0.335))
        }

        Coupon --> CouponTemplate with {
            label("1 : template", 0.74, 18.3)
            label("0..* : coupons", 0.32, -23.5)
            over = start(0).line(end(0.5))
        }

        CouponCode --> CouponTemplate with {
            label("1 : template", 0.605, 64)
            label("0..* : codes", 0.07, 7.9)
            over = start(Position.Right).axisAligned(1, end(0.665))
        }

        TaxRate --> TaxRateVersion with {
            label("1..* : versions", 0.865, -64.4)
            label("1 : taxRate", 0.025, -44.2)
            over = start(Position.Bottom).line(end(Position.Top))
        }

        OrderItem !--> TaxRateVersion with {
            label("1 : taxRateVersion", 0.665, -79.8)
            over = start(0.955).axisAligned(1, end(Position.Bottom))
        }

        ProductVariantVersion !--> TaxRate with {
            label("1 : taxRate", 0.76, 12.6)
            over = start(0.08).axisAligned(0.386, end(Position.Left))
        }

        list(CategorialCategoryTag, NumericalCategoryTag).forEach {
            it extends CategoryTag with {
                over = start(Position.Top).axisAligned(
                    -0.5,
                    end(Position.Bottom)
                )
            }
        }
        list(CategorialCategoryTagValue, NumericalCategoryTagValue).forEach {
            it extends CategoryTagValue with {
                over = start(Position.Bottom).axisAligned(
                    -0.5,
                    end(Position.Top)
                )
            }
        }

        Category --> CategoryTag with {
            label("0..* : tags", 0.73, -50.8)
            label("1 : category", 0.025, -48.9)
            over = start(0.25).line(end(0.75))
        }

        NumericalCategoryTag --> NumericalCategoryTagValue with {
            label("0..* : values", 0.77, -56)
            label("1 : tag", 0.075, -33)
            over = start(Position.Bottom).line(end(Position.Top))
        }

        CategorialCategoryTag --> CategorialCategoryTagValue with {
            label("0..* : values", 0.77, -56)
            label("1 : tag", 0.075, -33)
            over = start(Position.Bottom).line(end(Position.Top))
        }

        Product --> Category with {
            label("0..* : categories", 0.93, 12.7)
            label("0..* : products", 0.195, 5.4)
            over = start(Position.Right).axisAligned(0.248, end(Position.Left))
        }

        ProductVariantVersion --> CategoryTagValue with {
            label("0..* : tagValues", 0.845, 15)
            label("0..* productVersions", 0.225, 6.8)
            over = start(0.92).line(end(Position.Left))
        }
    }

    styles {
        cls("class-element") {
            vAlign = VAlign.Center
        }
        cls("v-top") {
            vAlign = VAlign.Top
        }
    }
}